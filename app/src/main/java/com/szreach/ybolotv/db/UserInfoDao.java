package com.szreach.ybolotv.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.szreach.ybolotv.bean.UserInfo;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "USER_INFO".
*/
public class UserInfoDao extends AbstractDao<UserInfo, Long> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CoId = new Property(0, long.class, "coId", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property UserName = new Property(2, String.class, "userName", false, "USER_NAME");
        public final static Property TrueName = new Property(3, String.class, "trueName", false, "TRUE_NAME");
        public final static Property UserSex = new Property(4, int.class, "userSex", false, "USER_SEX");
        public final static Property Introduction = new Property(5, String.class, "introduction", false, "INTRODUCTION");
        public final static Property UserLogin = new Property(6, String.class, "userLogin", false, "USER_LOGIN");
        public final static Property UserPass = new Property(7, String.class, "userPass", false, "USER_PASS");
        public final static Property UserOrg = new Property(8, String.class, "userOrg", false, "USER_ORG");
        public final static Property UserReg = new Property(9, String.class, "userReg", false, "USER_REG");
        public final static Property UserType = new Property(10, String.class, "userType", false, "USER_TYPE");
        public final static Property UserFlag = new Property(11, String.class, "userFlag", false, "USER_FLAG");
        public final static Property UserLast = new Property(12, String.class, "userLast", false, "USER_LAST");
        public final static Property UserImg = new Property(13, String.class, "userImg", false, "USER_IMG");
        public final static Property OpenId = new Property(14, String.class, "openId", false, "OPEN_ID");
        public final static Property UserWeixin = new Property(15, String.class, "userWeixin", false, "USER_WEIXIN");
        public final static Property UserPhone = new Property(16, String.class, "userPhone", false, "USER_PHONE");
        public final static Property UserEmail = new Property(17, String.class, "userEmail", false, "USER_EMAIL");
        public final static Property OrgId = new Property(18, String.class, "orgId", false, "ORG_ID");
        public final static Property PostId = new Property(19, String.class, "postId", false, "POST_ID");
        public final static Property UserPy = new Property(20, String.class, "userPy", false, "USER_PY");
        public final static Property OpenAvatar = new Property(21, String.class, "openAvatar", false, "OPEN_AVATAR");
        public final static Property OpenStatus = new Property(22, String.class, "openStatus", false, "OPEN_STATUS");
        public final static Property UserMain = new Property(23, String.class, "userMain", false, "USER_MAIN");
        public final static Property IsQy = new Property(24, String.class, "isQy", false, "IS_QY");
        public final static Property QyOpenId = new Property(25, String.class, "qyOpenId", false, "QY_OPEN_ID");
        public final static Property UnionId = new Property(26, String.class, "unionId", false, "UNION_ID");
        public final static Property LgOpenId = new Property(27, String.class, "lgOpenId", false, "LG_OPEN_ID");
        public final static Property Attribute1 = new Property(28, String.class, "attribute1", false, "ATTRIBUTE1");
        public final static Property Attribute2 = new Property(29, String.class, "attribute2", false, "ATTRIBUTE2");
        public final static Property Attribute3 = new Property(30, String.class, "attribute3", false, "ATTRIBUTE3");
        public final static Property Attribute4 = new Property(31, String.class, "attribute4", false, "ATTRIBUTE4");
        public final static Property SyncFlag = new Property(32, int.class, "syncFlag", false, "SYNC_FLAG");
        public final static Property UserPassCalc = new Property(33, String.class, "userPassCalc", false, "USER_PASS_CALC");
        public final static Property SessionId = new Property(34, String.class, "sessionId", false, "SESSION_ID");
        public final static Property LdapFlag = new Property(35, String.class, "ldapFlag", false, "LDAP_FLAG");
        public final static Property SendMailTime = new Property(36, String.class, "sendMailTime", false, "SEND_MAIL_TIME");
        public final static Property ActivatedFlag = new Property(37, int.class, "activatedFlag", false, "ACTIVATED_FLAG");
        public final static Property CoName = new Property(38, String.class, "coName", false, "CO_NAME");
    }


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: coId
                "\"USER_ID\" TEXT," + // 1: userId
                "\"USER_NAME\" TEXT," + // 2: userName
                "\"TRUE_NAME\" TEXT," + // 3: trueName
                "\"USER_SEX\" INTEGER NOT NULL ," + // 4: userSex
                "\"INTRODUCTION\" TEXT," + // 5: introduction
                "\"USER_LOGIN\" TEXT," + // 6: userLogin
                "\"USER_PASS\" TEXT," + // 7: userPass
                "\"USER_ORG\" TEXT," + // 8: userOrg
                "\"USER_REG\" TEXT," + // 9: userReg
                "\"USER_TYPE\" TEXT," + // 10: userType
                "\"USER_FLAG\" TEXT," + // 11: userFlag
                "\"USER_LAST\" TEXT," + // 12: userLast
                "\"USER_IMG\" TEXT," + // 13: userImg
                "\"OPEN_ID\" TEXT," + // 14: openId
                "\"USER_WEIXIN\" TEXT," + // 15: userWeixin
                "\"USER_PHONE\" TEXT," + // 16: userPhone
                "\"USER_EMAIL\" TEXT," + // 17: userEmail
                "\"ORG_ID\" TEXT," + // 18: orgId
                "\"POST_ID\" TEXT," + // 19: postId
                "\"USER_PY\" TEXT," + // 20: userPy
                "\"OPEN_AVATAR\" TEXT," + // 21: openAvatar
                "\"OPEN_STATUS\" TEXT," + // 22: openStatus
                "\"USER_MAIN\" TEXT," + // 23: userMain
                "\"IS_QY\" TEXT," + // 24: isQy
                "\"QY_OPEN_ID\" TEXT," + // 25: qyOpenId
                "\"UNION_ID\" TEXT," + // 26: unionId
                "\"LG_OPEN_ID\" TEXT," + // 27: lgOpenId
                "\"ATTRIBUTE1\" TEXT," + // 28: attribute1
                "\"ATTRIBUTE2\" TEXT," + // 29: attribute2
                "\"ATTRIBUTE3\" TEXT," + // 30: attribute3
                "\"ATTRIBUTE4\" TEXT," + // 31: attribute4
                "\"SYNC_FLAG\" INTEGER NOT NULL ," + // 32: syncFlag
                "\"USER_PASS_CALC\" TEXT," + // 33: userPassCalc
                "\"SESSION_ID\" TEXT," + // 34: sessionId
                "\"LDAP_FLAG\" TEXT," + // 35: ldapFlag
                "\"SEND_MAIL_TIME\" TEXT," + // 36: sendMailTime
                "\"ACTIVATED_FLAG\" INTEGER NOT NULL ," + // 37: activatedFlag
                "\"CO_NAME\" TEXT);"); // 38: coName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCoId());
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String trueName = entity.getTrueName();
        if (trueName != null) {
            stmt.bindString(4, trueName);
        }
        stmt.bindLong(5, entity.getUserSex());
 
        String introduction = entity.getIntroduction();
        if (introduction != null) {
            stmt.bindString(6, introduction);
        }
 
        String userLogin = entity.getUserLogin();
        if (userLogin != null) {
            stmt.bindString(7, userLogin);
        }
 
        String userPass = entity.getUserPass();
        if (userPass != null) {
            stmt.bindString(8, userPass);
        }
 
        String userOrg = entity.getUserOrg();
        if (userOrg != null) {
            stmt.bindString(9, userOrg);
        }
 
        String userReg = entity.getUserReg();
        if (userReg != null) {
            stmt.bindString(10, userReg);
        }
 
        String userType = entity.getUserType();
        if (userType != null) {
            stmt.bindString(11, userType);
        }
 
        String userFlag = entity.getUserFlag();
        if (userFlag != null) {
            stmt.bindString(12, userFlag);
        }
 
        String userLast = entity.getUserLast();
        if (userLast != null) {
            stmt.bindString(13, userLast);
        }
 
        String userImg = entity.getUserImg();
        if (userImg != null) {
            stmt.bindString(14, userImg);
        }
 
        String openId = entity.getOpenId();
        if (openId != null) {
            stmt.bindString(15, openId);
        }
 
        String userWeixin = entity.getUserWeixin();
        if (userWeixin != null) {
            stmt.bindString(16, userWeixin);
        }
 
        String userPhone = entity.getUserPhone();
        if (userPhone != null) {
            stmt.bindString(17, userPhone);
        }
 
        String userEmail = entity.getUserEmail();
        if (userEmail != null) {
            stmt.bindString(18, userEmail);
        }
 
        String orgId = entity.getOrgId();
        if (orgId != null) {
            stmt.bindString(19, orgId);
        }
 
        String postId = entity.getPostId();
        if (postId != null) {
            stmt.bindString(20, postId);
        }
 
        String userPy = entity.getUserPy();
        if (userPy != null) {
            stmt.bindString(21, userPy);
        }
 
        String openAvatar = entity.getOpenAvatar();
        if (openAvatar != null) {
            stmt.bindString(22, openAvatar);
        }
 
        String openStatus = entity.getOpenStatus();
        if (openStatus != null) {
            stmt.bindString(23, openStatus);
        }
 
        String userMain = entity.getUserMain();
        if (userMain != null) {
            stmt.bindString(24, userMain);
        }
 
        String isQy = entity.getIsQy();
        if (isQy != null) {
            stmt.bindString(25, isQy);
        }
 
        String qyOpenId = entity.getQyOpenId();
        if (qyOpenId != null) {
            stmt.bindString(26, qyOpenId);
        }
 
        String unionId = entity.getUnionId();
        if (unionId != null) {
            stmt.bindString(27, unionId);
        }
 
        String lgOpenId = entity.getLgOpenId();
        if (lgOpenId != null) {
            stmt.bindString(28, lgOpenId);
        }
 
        String attribute1 = entity.getAttribute1();
        if (attribute1 != null) {
            stmt.bindString(29, attribute1);
        }
 
        String attribute2 = entity.getAttribute2();
        if (attribute2 != null) {
            stmt.bindString(30, attribute2);
        }
 
        String attribute3 = entity.getAttribute3();
        if (attribute3 != null) {
            stmt.bindString(31, attribute3);
        }
 
        String attribute4 = entity.getAttribute4();
        if (attribute4 != null) {
            stmt.bindString(32, attribute4);
        }
        stmt.bindLong(33, entity.getSyncFlag());
 
        String userPassCalc = entity.getUserPassCalc();
        if (userPassCalc != null) {
            stmt.bindString(34, userPassCalc);
        }
 
        String sessionId = entity.getSessionId();
        if (sessionId != null) {
            stmt.bindString(35, sessionId);
        }
 
        String ldapFlag = entity.getLdapFlag();
        if (ldapFlag != null) {
            stmt.bindString(36, ldapFlag);
        }
 
        String sendMailTime = entity.getSendMailTime();
        if (sendMailTime != null) {
            stmt.bindString(37, sendMailTime);
        }
        stmt.bindLong(38, entity.getActivatedFlag());
 
        String coName = entity.getCoName();
        if (coName != null) {
            stmt.bindString(39, coName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCoId());
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String trueName = entity.getTrueName();
        if (trueName != null) {
            stmt.bindString(4, trueName);
        }
        stmt.bindLong(5, entity.getUserSex());
 
        String introduction = entity.getIntroduction();
        if (introduction != null) {
            stmt.bindString(6, introduction);
        }
 
        String userLogin = entity.getUserLogin();
        if (userLogin != null) {
            stmt.bindString(7, userLogin);
        }
 
        String userPass = entity.getUserPass();
        if (userPass != null) {
            stmt.bindString(8, userPass);
        }
 
        String userOrg = entity.getUserOrg();
        if (userOrg != null) {
            stmt.bindString(9, userOrg);
        }
 
        String userReg = entity.getUserReg();
        if (userReg != null) {
            stmt.bindString(10, userReg);
        }
 
        String userType = entity.getUserType();
        if (userType != null) {
            stmt.bindString(11, userType);
        }
 
        String userFlag = entity.getUserFlag();
        if (userFlag != null) {
            stmt.bindString(12, userFlag);
        }
 
        String userLast = entity.getUserLast();
        if (userLast != null) {
            stmt.bindString(13, userLast);
        }
 
        String userImg = entity.getUserImg();
        if (userImg != null) {
            stmt.bindString(14, userImg);
        }
 
        String openId = entity.getOpenId();
        if (openId != null) {
            stmt.bindString(15, openId);
        }
 
        String userWeixin = entity.getUserWeixin();
        if (userWeixin != null) {
            stmt.bindString(16, userWeixin);
        }
 
        String userPhone = entity.getUserPhone();
        if (userPhone != null) {
            stmt.bindString(17, userPhone);
        }
 
        String userEmail = entity.getUserEmail();
        if (userEmail != null) {
            stmt.bindString(18, userEmail);
        }
 
        String orgId = entity.getOrgId();
        if (orgId != null) {
            stmt.bindString(19, orgId);
        }
 
        String postId = entity.getPostId();
        if (postId != null) {
            stmt.bindString(20, postId);
        }
 
        String userPy = entity.getUserPy();
        if (userPy != null) {
            stmt.bindString(21, userPy);
        }
 
        String openAvatar = entity.getOpenAvatar();
        if (openAvatar != null) {
            stmt.bindString(22, openAvatar);
        }
 
        String openStatus = entity.getOpenStatus();
        if (openStatus != null) {
            stmt.bindString(23, openStatus);
        }
 
        String userMain = entity.getUserMain();
        if (userMain != null) {
            stmt.bindString(24, userMain);
        }
 
        String isQy = entity.getIsQy();
        if (isQy != null) {
            stmt.bindString(25, isQy);
        }
 
        String qyOpenId = entity.getQyOpenId();
        if (qyOpenId != null) {
            stmt.bindString(26, qyOpenId);
        }
 
        String unionId = entity.getUnionId();
        if (unionId != null) {
            stmt.bindString(27, unionId);
        }
 
        String lgOpenId = entity.getLgOpenId();
        if (lgOpenId != null) {
            stmt.bindString(28, lgOpenId);
        }
 
        String attribute1 = entity.getAttribute1();
        if (attribute1 != null) {
            stmt.bindString(29, attribute1);
        }
 
        String attribute2 = entity.getAttribute2();
        if (attribute2 != null) {
            stmt.bindString(30, attribute2);
        }
 
        String attribute3 = entity.getAttribute3();
        if (attribute3 != null) {
            stmt.bindString(31, attribute3);
        }
 
        String attribute4 = entity.getAttribute4();
        if (attribute4 != null) {
            stmt.bindString(32, attribute4);
        }
        stmt.bindLong(33, entity.getSyncFlag());
 
        String userPassCalc = entity.getUserPassCalc();
        if (userPassCalc != null) {
            stmt.bindString(34, userPassCalc);
        }
 
        String sessionId = entity.getSessionId();
        if (sessionId != null) {
            stmt.bindString(35, sessionId);
        }
 
        String ldapFlag = entity.getLdapFlag();
        if (ldapFlag != null) {
            stmt.bindString(36, ldapFlag);
        }
 
        String sendMailTime = entity.getSendMailTime();
        if (sendMailTime != null) {
            stmt.bindString(37, sendMailTime);
        }
        stmt.bindLong(38, entity.getActivatedFlag());
 
        String coName = entity.getCoName();
        if (coName != null) {
            stmt.bindString(39, coName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.getLong(offset + 0), // coId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // trueName
            cursor.getInt(offset + 4), // userSex
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // introduction
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // userLogin
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // userPass
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // userOrg
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // userReg
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // userType
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // userFlag
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // userLast
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // userImg
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // openId
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // userWeixin
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // userPhone
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // userEmail
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // orgId
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // postId
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // userPy
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // openAvatar
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // openStatus
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // userMain
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // isQy
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // qyOpenId
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // unionId
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // lgOpenId
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // attribute1
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // attribute2
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // attribute3
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // attribute4
            cursor.getInt(offset + 32), // syncFlag
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // userPassCalc
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // sessionId
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // ldapFlag
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // sendMailTime
            cursor.getInt(offset + 37), // activatedFlag
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38) // coName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.setCoId(cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTrueName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserSex(cursor.getInt(offset + 4));
        entity.setIntroduction(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUserLogin(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUserPass(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUserOrg(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUserReg(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUserType(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUserFlag(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUserLast(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setUserImg(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setOpenId(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setUserWeixin(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setUserPhone(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setUserEmail(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setOrgId(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setPostId(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setUserPy(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setOpenAvatar(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setOpenStatus(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setUserMain(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setIsQy(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setQyOpenId(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setUnionId(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setLgOpenId(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setAttribute1(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setAttribute2(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setAttribute3(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setAttribute4(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setSyncFlag(cursor.getInt(offset + 32));
        entity.setUserPassCalc(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setSessionId(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setLdapFlag(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setSendMailTime(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setActivatedFlag(cursor.getInt(offset + 37));
        entity.setCoName(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserInfo entity, long rowId) {
        entity.setCoId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserInfo entity) {
        if(entity != null) {
            return entity.getCoId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfo entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
